//Stacks and queues are two data structures
//Queues is FIFO (First in, first out)
//Stacks is LIFO (Last in, first out)

//stack.push(x) or queue.push(x) pushes elements in the stack or queue
//stack.top() reads last element
//queue.top() reads first element 
//stack.pop() removes the bottom element
//queue.pop() removes the first element

#include <iostream>
#include <stack>   
#include <queue> 
using namespace std;

class Solution {
public:
    void pushCharacter(char ch){
        stack1.push(ch);
    }
    void enqueueCharacter(char ch){
        queue1.push(ch);
    }
    char popCharacter(){
        char top= stack1.top();
        stack1.pop();
        return top;
    } 
    char dequeueCharacter(){
        char front = queue1.front();
        queue1.pop();
        return front;
    }  
private:
    std::stack<char> stack1 ;
    std::queue<char> queue1;
    

};

int main() {
    // read the string s.
    string s;
    getline(cin, s);
    
  	// create the Solution class object p.
    Solution obj;
    
    // push/enqueue all the characters of string s to stack.
    for (int i = 0; i < s.length(); i++) {
        obj.pushCharacter(s[i]);
        obj.enqueueCharacter(s[i]);
    }
    
    bool isPalindrome = true;
    
    // pop the top character from stack.
    // dequeue the first character from queue.
    // compare both the characters.
    for (int i = 0; i < s.length() / 2; i++) {
        if (obj.popCharacter() != obj.dequeueCharacter()) {
            isPalindrome = false;
            
            break;
        }
    }
    
    // finally print whether string s is palindrome or not.
    if (isPalindrome) {
        cout << "The word, " << s << ", is a palindrome.";
    } else {
        cout << "The word, " << s << ", is not a palindrome.";
    }
    
    return 0;
}

